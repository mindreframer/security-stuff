Cryptobox: A Crypto API
2013 August 22

Kyle Isom
@kyleisom

* Introduction

Developers who want to use crypto are often turned away by the difficulty of making sure it's done right. They are still tasked with building systems that are secure, and are often left to figure out the security components themselves. This has the unfortunately tendency to lead to improperly-built security systems.

Cryptobox is a set of packages modeled after [[http://nacl.cr.yp.to/][djb's NaCl]] library that aims to provide developers with a well-documented, properly-written, set of tools for proper encryption. It uses NIST-standard ciphers, including the NIST elliptic curves, AES, and HMAC-SHA2.

* What are we trying to do, anyways?

Most secure systems are trying to provide security for discrete chunks of data. We'll call these _messages_.

We have three main objectives we're trying to satisfy when building secure systems:

- Confidentiality: a message's contents can't be eavesdropped on by an observer. If Eve is watching the network or looking at Alice's hard drive, she shouldn't be able to read messages from Alice to Bob.
- Integrity: a message can't be tampered with; what the receiver gets is exactly what the sender sent.
- Authentication: we would like some assurance that the message was sent by the sender we think sent it.

Just as properly-written software needs a specification, we need a security specification. It should cover what we're protecting against, what our threats are, and under what conditions we should reasonably expect the system to remain secure. *Every* system can be broken in some way, but we can reason about what point we're comfortable with our security. We codify our reasoning, expectations, and assumptions in a written specification called the _security_model_.

* Two flavours of cryptography

There are two kinds of cryptography:

- Secret key: everyone shares keys and it is difficult to exchange keys securely. Secret key crypto is very fast.
- Public key: keys have a private component and public component, very easy exchange keys. However, it's very slow.

We can combine these two forms to leverage their benefits:

- Use public key cryptography to exchange keys and encrypt secret keys,
- Use secret key cryptography to actually encrypt the message.

* Cryptobox: An Overview

Cryptobox provides packages for two different levels of security, "secret" and "top secret".

- `secretbox` provides "secret" level symmetric cryptography, and `box` provides "secret" level public-key cryptography. The "secret" level cryptography is appropriate for messages that need to stay secure for a shorter period of time (within 20 years).

- `strongbox` provides "top secret" level symmetric cryptography, and `stoutbox` provides "top secret" level public-key cryptography. The "top secret" level is appropriate for messages that need to stay secure for a much longer period of time (within 50 years). This would be appropriate, for example, for financial information or health records.

Keys are provided and used as simply `[]byte` values (with type aliases to help you in your code), making them easy to use in actual code. Users don't have to worry about marshaling or parsing keys; they can be handled the same as any other `[]byte` value.

* The Cryptobox security model

The [[http://cryptobox.tyrfingr.is/cryptobox.pdf][Cryptobox specification]] details the security model that it operates under. Specifically:

1. Cryptobox operates on discrete messages. As an example, all of the functions dealing with messages operate on byte slices.

2. No attempt is made to provide any anonymity. Particularly, the size of messages is not disguised. A standard `box` encrypted message doesn't contain any publicly-identifiable information, but other layers may leak traffic information.

3. Boxes by themselves provide no mechanism for preventing a message from being repeated. The protocol that is using CryptoBox must ensure that the exact same message isn't repeated; perhaps by including a non-repeating nonce or counter value. The proper way to do this is going to vary between systems; one system might use a database to store message sequence numbers, for example.

4. It is assumed that system has a source of good entropy (source of random data). This is a dangerous assumption for the system as a whole, but it's not solveable at the Cryptobox level.

* An example: Alice and Bob

When it is two peers communicating, we can use the normal functions provided in `box` (or `stoutbox`, as the security requirements change).

Each of them would call the `GenerateKey` function:

	priv, pub, ok := box.GenerateKey()
	if !ok {
		// Handle the error appropriately. Discard the keys.
	}

Now, both Alice and Bob have their key pair:

- The `priv` value should be kept secret. This should never be distributed to anyone else.
- The `pub` value can be given out to anybody and everybody that needs to communicate with the owner.

* Seal and Open

All of the cryptobox packages provide a pair of functions to secure and retrieve a message.

- `Seal` will "lock" the message in a secure box,
- `Open` will "unlock" this box, authenticate the message, and return the original message.

The public-key packages also support signing the messages with a digital signature with the pair of functions

- `SignAndSeal` signs the message and locks it in a box.
- `OpenAndVerify` unlocks the box, checks the signature, and returns the original message.

* Back to Alice and Bob

If Alice wants to send a message to Bob, she first needs his public key. We'll say that she's retrieved it, and has it stored in `peer`.

	message := []byte("Hello, world.")
	locked, ok := box.Seal(peer, message)
	if !ok {
		// The sealing failed.
	} else {
		// Assuming conn is a net.Conn value:
		_, err := conn.Write(locked)
		// error handling for the write
	}

Once Bob receives the message, he just needs to unlock the box with his private key:

    var locked = make([]byte, MaxMessageSize)
    n, err := conn.Read(locked)
    if err != nil {
        // Error handling
    }
    locked = locked[:n]
    message, ok := box.Open(locked, priv)
    if !ok {
        // Opening the box failed.
    }

* Alice and Bob and Charlie (oh my)

The `Seal` and `Open` messages assume a direct 1:1 sender-to-receiver relationship. But what about groups?

Here, we'll use both `box` and `secretbox` to securely send a message. We'll assume everyone has generated their public and private keys, and we'll assume those keys are stored in `var`alice,`bob,`charlie`box.PublicKey`.

Now, let's define some structures:

	// SharedKey associates a public key with a box containing a secretbox key.
	type SharedKey struct {
		Peer PublicKey
		Box []byte
	}

	type SecureMessage struct {
		SharedKeys []SharedKey
		Box []byte
	}

If Alice wants to send a message to Bob and Charlie, she generates a secretbox key and locks it in a box for Bob and in a box for Charlie:

	func LockShared(message []byte, peerList []box.PublicKey) (*SecureMessage, bool) {
		messageKey, ok := secretbox.GenerateKey()
		if !ok {
			return nil, false
		}
		
		var sm SecureMessage
		for _, peer := range peerList {
			sBox, ok := box.Seal(peer, messageKey)
			if !ok {
				return nil, false
			}
			sm.SharedKeys = append(sm.SharedKeys, SharedKey{peer, sBox})
		}
	
		sm.Box, ok = secretbox.Seal(message, messageKey)
		return &sm, ok
	}

If Charlie wants to read this message, he checks the `SharedKey` fields for his public key and gets the message key from there:

	func OpenShared(sm *SecureMessage, priv box.PrivateKey, pub box.PublicKey) ([]byte, bool) {
		var messageKey []byte

		for _, shared := range sm.SharedKeys {
			if bytes.Equal(shared.Peer, pub) {
				messageKey, ok := box.Open(shared.Box, priv)
				if !ok {
					return nil, false
				}
				break
			}
		}
		if messageKey == nil {
			return nil, false
		}
		return secretbox.Open(sm.Box, messageKey)
	}

* How fast is it?

Test machine is a quad-core 2.6 GHz i5 running OpenBSD.

	go version devel +037a28ab0725 Thu Aug 22 12:13:54 2013 +0900 openbsd/amd64

The "secret" level packages:

	PASS
	BenchmarkUnsignedSeal        500           6863606 ns/op
	BenchmarkSignAndSeal         200           9317677 ns/op
	BenchmarkUnsignedOpen        500           5226215 ns/op
	BenchmarkOpenSigned          100          14092175 ns/op
	BenchmarkSharedKey           500           5003339 ns/op
	ok      github.com/gokyle/cryptobox/box 15.066s
	PASS
	BenchmarkSeal      		   10000            204980 ns/op
	BenchmarkOpen      		   10000            206254 ns/op
	ok      github.com/gokyle/cryptobox/secretbox   4.163s

The "top secret" level packages:

	PASS
	BenchmarkUnsignedSeal         20          96284535 ns/op
	BenchmarkSignAndSeal          10         145859044 ns/op
	BenchmarkUnsignedOpen         50          49549263 ns/op
	BenchmarkOpenSigned           10         163035000 ns/op
	BenchmarkSharedKey            50          50151581 ns/op
	ok      github.com/gokyle/cryptobox/stoutbox    17.962s
	PASS
	BenchmarkSeal      		   10000            177209 ns/op
	BenchmarkOpen      		   10000            166309 ns/op
	ok      github.com/gokyle/cryptobox/strongbox   3.482s

The "top secret" security comes at a price: `stoutbox` is roughly 10x slower than `box`.

* The developer's role

Cryptobox is a featureful toolkit, but it doesn't do everything. Particularly, developers are responsible for

- Ensuring messages don't repeat: this is a problem for the underlying message, as Cryptobox only sees a byte slice.
- Providing good entropy: this is a problem for the underlying system.
- Securing and storing private and secret keys: of course, if the keys are compromised, the messages are compromised as well. We can mitigate this to some extent with forward secrecy, but once again, this falls outside the scope of what Cryptobox does.
- Implementing proper security measures throughout the site: cryptography is only a small part of a secure system, and an attacker will almost always go after the weakest link.

Cryptobox doesn't alleviate the need to build a proper security model; it just provides a tool for properly securing messages.

* Under the hood

`box` uses `secretbox` as the base. Remember our three objectives?

- Confidentiality: secretbox uses AES-128 in CTR mode for secrecy.
- Integrity and authenticity: HMAC-SHA-256 message tags are used to provide both integrity and authenticity.

When `box` locks a message, it uses the same `SharedKey` mechanism to build a secretbox key. For performance and higher-security, box uses elliptic curves on the NIST P256 curve. Locking is done using an ephemeral key, which can also be used for forward secrecy.

Similarly, `stoutbox` uses `strongbox` as the base. Instead of using AES-128, however, it uses AES-256. It also substitutes HMAC-SHA-384 in the message tags, and uses the NIST P521 curve.

The Go standard library ships with all of the packages to implement this, which leads to Cryptobox having no external dependencies.

* Writing cryptographic code

Writing cryptographic code is tricky. Most of the time, cryptographic systems aren't attacked via their ciphers, but through side-channels. Care has to be taken to avoid leaking additional information as much as possible. (Un)fortunately, we have a lot of examples of where systems have been broken.

The `crypto/subtle` package has functions for comparing values in a constant time. Cryptobox makes heavy use of this. A practical example of where this comes into play is message tagging (the HMAC-SHA-256). A normal `bytes.Equal` approach stops as soon as two bytes don't match. An attacker can measure the time differences between different tags and use this to recover the message underneath.

Another gotcha is in the case where decryption is done before checking the message tag; this also leaks information attackers can (and have) exploited. Cryptobox verifies tags before proceeding with decryption, making an attacker's job much more difficult.

* Ensuring correctness

It's particularly important to have a solid test suite when writing cryptographic code and systems: use tests to validate assumptions, and to ensure the converse. For example, we can test to make sure that encrypting and decrypting a message gives us the original message. However, there's a few other tests we should be running as well:

- An attacker shouldn't be able to use a different key to decrypt the message.
- Furthermore, if an attacker changes even single a bit in the key, the decryption should fail.
- If an attacker changes a bit in the message, the decryption should fail.

The idea is to test every way an attacker might try to break our security objectives (whether by recovering the message or successfully tampering with the message), and to ensure that the system doesn't fail within the security model.

Each of the Cryptobox packages ships with tests; they are run very frequently during development to ensure proper behaviour of the system. We want to constantly ensure we aren't breaking the model ourselves.

* Road map

- In the near future, support for signed keys will be added to facilitate forward secrecy.
- At some point, some of the public-key box formats will be tweaked to make porting to other languages easier.
- There are partially-completed ports to C and Python; these should be finished up.
- The GCM cipher mode needs to be ported over to Go; this will improve performance.
- Build in support for shared boxes.

One of the key goals here is to give developers a simple API to secure messages, so care has to be taken to ensure the packages do not become more complex to use than is required. Specifically, there aren't any knobs or settings that can be changed (although the PRNG may be changed). By choosing secure defaults and using a proper selection of a cipher suite, we ensure a developer doesn't have to choose a cipher.

* Links

If you'd like to read more on the project, feel free to stop by the  [[http://cryptobox.tyrfingr.is][Cryptobox site]]; among other things, there's an in-progress [[http://cryptobox.tyrfingr.is/cryptobox.pdf][paper describing the project]] available. You can also look at the [[https://github.com/gokyle/cryptobox][Github page]] or check out the [[http://godoc.org/github.com/gokyle/cryptobox][Godocs]].

Also, please feel free to send feedback to kyle@gokyle.net.



